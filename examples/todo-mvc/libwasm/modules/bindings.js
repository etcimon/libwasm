// File is autogenerated with `dub libwasm:webidl -- --bindgen`
import {libwasm as spa, encoders as encoder, decoders as decoder} from '../modules/libwasm.js';
let libwasm = spa;
let memory = {};
const objects = libwasm.objects;
const addObject = libwasm.addObject;
const setupMemory = () => {
    let buffer = libwasm.memory.buffer;
    if (memory.heapi32s && !memory.heapi32s.length === 0)
        return;
    memory.heapi32s = new Int32Array(buffer)
    memory.heapi32u = new Uint32Array(buffer)
    memory.heapi16s = new Int16Array(buffer)
    memory.heapi16u = new Uint16Array(buffer)
    memory.heapi8s = new Int8Array(buffer)
    memory.heapi8u = new Uint8Array(buffer)
    memory.heapf32 = new Float32Array(buffer)
    memory.heapf64 = new Float64Array(buffer)
}
Promise
const setBool = (ptr, val) => (memory.heapi32u[ptr/4] = +val),
      setInt = (ptr, val) => (memory.heapi32s[ptr/4] = val),
      setUInt = (ptr, val) => (memory.heapi32u[ptr/4] = val),
      setShort = (ptr, val) => (memory.heapi16s[ptr/2] = val),
      setUShort = (ptr, val) => (memory.heapi16u[ptr/2] = val),
      setByte = (ptr, val) => (memory.heapi8s[ptr] = val),
      setUByte = (ptr, val) => (memory.heapi8u[ptr] = val),
      setFloat = (ptr, val) => (memory.heapf32[ptr/4] = val),
      setDouble = (ptr, val) => (memory.heapf64[ptr/8] = val),
      getBool = (ptr) => memory.heapi32u[ptr/4],
      getInt = (ptr) => memory.heapi32s[ptr/4],
      getUInt = (ptr) => memory.heapi32u[ptr/4],
      getShort = (ptr) => memory.heapi16s[ptr/2],
      getUShort = (ptr) => memory.heapi16u[ptr/2],
      getByte = (ptr) => memory.heapi8s[ptr],
      getUByte = (ptr) => memory.heapi8u[ptr],
      getFloat = (ptr) => memory.heapf32[ptr/4],
      getDouble = (ptr) => memory.heapf64[ptr/8],
      isDefined = (val) => (val != undefined && val != null),
      encode_handle = (ptr, val) => { setUInt(ptr, addObject(val)); },
      decode_handle = (ptr) => { return objects[getUInt(ptr)]; },
      libwasm_encode_string = encoder.string,
      libwasm_decode_string = decoder.string,
      libwasm_indirect_function_get = (ptr)=>libwasm.instance.exports.__indirect_function_table.get(ptr),
  libwasm_encode_Handle = encode_handle,
  libwasm_encode_optional_Handle = (ptr, val)=>{
    if (setBool(ptr+4, isDefined(val))) {
      libwasm_encode_Handle(ptr, val);
    }
  };
export let jsExports = {
  env: {
    DOMTokenList_add: (ctx, tokensLen, tokensPtr) => {
      setupMemory();
      objects[ctx].add(libwasm_decode_string(tokensLen, tokensPtr));
    },
    Document_createElement_0: (ctx, localNameLen, localNamePtr) => {
      setupMemory();
      return addObject(objects[ctx].createElement(libwasm_decode_string(localNameLen, localNamePtr)));
    },
    Document_body_Get: (rawResult, ctx) => {
      setupMemory();
      libwasm_encode_optional_Handle(rawResult, objects[ctx].body);
    },
    Element_classList_Get: (ctx) => {
      setupMemory();
      return addObject(objects[ctx].classList);
    },
    Element_innerHTML_Set: (ctx, innerHTMLLen, innerHTMLPtr) => {
      setupMemory();
      objects[ctx].innerHTML = libwasm_decode_string(innerHTMLLen, innerHTMLPtr);
    },
    Node_appendChild: (ctx, node) => {
      setupMemory();
      return addObject(objects[ctx].appendChild(objects[node]));
    },
    HTMLInputElement_checked_Get: (ctx) => {
      setupMemory();
      return objects[ctx].checked;
    },
    HTMLInputElement_value_Get: (rawResult, ctx) => {
      setupMemory();
      libwasm_encode_string(rawResult, objects[ctx].value);
    },
    HTMLOrSVGElement_focus_0: (ctx) => {
      setupMemory();
      objects[ctx].focus();
    },
  }
}