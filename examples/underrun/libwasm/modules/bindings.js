// File is autogenerated with `dub libwasm:webidl -- --bindgen`
import {libwasm as spa, encoders as encoder, decoders as decoder} from '../modules/libwasm.js';
let libwasm = spa;
let memory = {};
const setupMemory = () => {
    let buffer = libwasm.memory.buffer;
    if (memory.heapi32s && !memory.heapi32s.length === 0)
        return;
    memory.heapi32s = new Int32Array(buffer)
    memory.heapi32u = new Uint32Array(buffer)
    memory.heapi16s = new Int16Array(buffer)
    memory.heapi16u = new Uint16Array(buffer)
    memory.heapi8s = new Int8Array(buffer)
    memory.heapi8u = new Uint8Array(buffer)
    memory.heapf32 = new Float32Array(buffer)
    memory.heapf64 = new Float64Array(buffer)
}
const setBool = (ptr, val) => (memory.heapi32u[ptr/4] = +val),
      setInt = (ptr, val) => (memory.heapi32s[ptr/4] = val),
      setUInt = (ptr, val) => (memory.heapi32u[ptr/4] = val),
      setShort = (ptr, val) => (memory.heapi16s[ptr/2] = val),
      setUShort = (ptr, val) => (memory.heapi16u[ptr/2] = val),
      setByte = (ptr, val) => (memory.heapi8s[ptr] = val),
      setUByte = (ptr, val) => (memory.heapi8u[ptr] = val),
      setFloat = (ptr, val) => (memory.heapf32[ptr/4] = val),
      setDouble = (ptr, val) => (memory.heapf64[ptr/8] = val),
      getBool = (ptr) => memory.heapi32u[ptr/4],
      getInt = (ptr) => memory.heapi32s[ptr/4],
      getUInt = (ptr) => memory.heapi32u[ptr/4],
      getShort = (ptr) => memory.heapi16s[ptr/2],
      getUShort = (ptr) => memory.heapi16u[ptr/2],
      getByte = (ptr) => memory.heapi8s[ptr],
      getUByte = (ptr) => memory.heapi8u[ptr],
      getFloat = (ptr) => memory.heapf32[ptr/4],
      getDouble = (ptr) => memory.heapf64[ptr/8],
      isDefined = (val) => (val != undefined && val != null),
      encode_handle = (ptr, val) => { setUInt(ptr, libwasm.addObject(val)); },
      decode_handle = (ptr) => { return libwasm.objects[getUInt(ptr)]; },
      libwasm_encode_string = encoder.string,
      libwasm_decode_string = decoder.string,
      libwasm_indirect_function_get = (ptr)=>libwasm.instance.exports.__indirect_function_table.get(ptr),
  libwasm_encode_Handle = encode_handle,
  libwasm_encode_optional_RenderingContext = (ptr, val)=>{
    if (setBool(ptr+8, isDefined(val))) {
      libwasm_encode_union4_CanvasRenderingContext2D_ImageBitmapRenderingContext_WebGLRenderingContext_WebGL2RenderingContext(ptr, val);
    }
  },
  libwasm_encode_union4_CanvasRenderingContext2D_ImageBitmapRenderingContext_WebGLRenderingContext_WebGL2RenderingContext = (ptr, val)=>{
    if (val instanceof CanvasRenderingContext2D) {
      setUInt(ptr, 0);
      libwasm_encode_Handle(ptr+4, val);
    } else if (val instanceof ImageBitmapRenderingContext) {
      setUInt(ptr, 1);
      libwasm_encode_Handle(ptr+4, val);
    } else if (val instanceof WebGLRenderingContext) {
      setUInt(ptr, 2);
      libwasm_encode_Handle(ptr+4, val);
    } else if (val instanceof WebGL2RenderingContext) {
      setUInt(ptr, 3);
      libwasm_encode_Handle(ptr+4, val);
    }
  };
export let jsExports = {
  env: {
    Element_clientWidth_Get: (ctx) => {
      setupMemory();
      return libwasm.objects[ctx].clientWidth;
    },
    Element_clientHeight_Get: (ctx) => {
      setupMemory();
      return libwasm.objects[ctx].clientHeight;
    },
    EventTarget_addEventListener_0: (ctx, typeLen, typePtr, callbackCtx, callbackPtr) => {
      setupMemory();
      libwasm.objects[ctx].addEventListener(libwasm_decode_string(typeLen, typePtr), (event)=>{encode_handle(0, event);libwasm_indirect_function_get(callbackPtr)(callbackCtx, 0)});
    },
    EventTarget_removeEventListener_0: (ctx, typeLen, typePtr, callbackCtx, callbackPtr) => {
      setupMemory();
      libwasm.objects[ctx].removeEventListener(libwasm_decode_string(typeLen, typePtr), (event)=>{encode_handle(0, event);libwasm_indirect_function_get(callbackPtr)(callbackCtx, 0)});
    },
    HTMLCanvasElement_getContext_0: (rawResult, ctx, contextIdLen, contextIdPtr) => {
      setupMemory();
      libwasm_encode_optional_RenderingContext(rawResult, libwasm.objects[ctx].getContext(libwasm_decode_string(contextIdLen, contextIdPtr)));
    },
  }
}